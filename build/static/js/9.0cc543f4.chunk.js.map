{"version":3,"sources":["API/HttpService.jsx","API/ApiPaths.jsx","store/actions/index.jsx","containers/MeetingRoom/MeetingRoom.jsx"],"names":["axios","create","baseURL","API_NAME","signIn","formValues","dispatch","a","HttpService","post","response","type","ActionType","payload","data","user","status","localStorage","setItem","_id","name","email","phone","user_plan","containerId","window","location","href","fetchActiveMeetings","query","get","params","fetchInActiveMeetings","createMeeting","body","room","id","history","push","fetchMeetingByRoomId","conference","MeetingRoom","this","props","match","getItem","className","src","meeting","room_url","frameBorder","height","width","Component","connect","state","meetings"],"mappings":"kUAEeA,E,OAAAA,EAAMC,OAAO,CAC1BC,QAAS,oCCHEC,EACF,cADEA,EAEF,W,QCIEC,G,MAAS,SAAAC,GAAU,8CAAI,WAAMC,GAAN,iBAAAC,EAAA,sEACXC,EAAYC,KAAKN,EAAkBE,GADxB,OAC5BK,EAD4B,OAGlCJ,EAAS,CACPK,KAAMC,IACNC,QAASH,EAASI,KAAKC,OAGF,KAAnBL,EAASM,SACLF,EAAOJ,EAASI,KAAKC,KAC3BE,aAAaC,QAAQ,KAAMJ,EAAKK,KAChCF,aAAaC,QAAQ,OAAQJ,EAAKM,MAClCH,aAAaC,QAAQ,QAASJ,EAAKO,OACnCJ,aAAaC,QAAQ,QAASJ,EAAKQ,OACnCL,aAAaC,QAAQ,YAAaJ,EAAKS,WACvCN,aAAaC,QAAQ,cAAeJ,EAAKU,aAGzCC,OAAOC,SAASC,KAAO,cAlBS,2CAAJ,wDAqBnBC,EAAsB,SAAAC,GAAK,8CAAI,WAAMvB,GAAN,eAAAC,EAAA,sEACnBC,EAAYsB,IAAI3B,EAAkB,CACvD4B,OAAQF,IAFgC,OACpCnB,EADoC,OAK1CJ,EAAS,CACPK,KAAMC,IACNC,QAASH,EAASI,KAAKA,OAPiB,2CAAJ,uDAU3BkB,EAAwB,SAAAH,GAAK,8CAAI,WAAMvB,GAAN,eAAAC,EAAA,sEACrBC,EAAYsB,IAAI3B,EAAkB,CACvD4B,OAAQF,IAFkC,OACtCnB,EADsC,OAK5CJ,EAAS,CACPK,KAAMC,IACNC,QAASH,EAASI,KAAKA,OAPmB,2CAAJ,uDAU7BmB,EAAgB,SAAAC,GAAI,8CAAI,WAAM5B,GAAN,eAAAC,EAAA,sEACZC,EAAYC,KAAKN,EAAkB+B,GADvB,OAC7BxB,EAD6B,OAGnCJ,EAAS,CACPK,KAAMC,IACNC,QAASH,EAASI,KAAKA,KAAKqB,OAGfzB,EAASI,KAAKA,KAAKqB,KAAKC,GAEhB,KAAnB1B,EAASM,QACXqB,IAAQC,KAAK,cAXoB,2CAAJ,uDAepBC,EAAuB,SAAAV,GAAK,8CAAI,WAAMvB,GAAN,eAAAC,EAAA,sEACpBC,EAAYsB,IAAI3B,EAAkB,CACvD4B,OAAQF,IAFiC,OACrCnB,EADqC,OAK3CJ,EAAS,CACPK,KAAMC,IACNC,QAASH,EAASI,KAAKA,KAAK0B,aAPa,2CAAJ,wD,mIC1DnCC,G,yLAEF,IAAMP,EAAO,CACXE,GAAIM,KAAKC,MAAMC,MAAMb,OAAOK,GAC5BZ,YAAaP,aAAa4B,QAAQ,gBAGpCH,KAAKC,MAAMJ,qBAAqBL,K,+BAIhC,OACE,6BACE,yBAAKY,UAAU,mBACb,4BACEA,UAAU,SACVC,IAAKL,KAAKC,MAAMK,QAAQC,SACxBC,YAAY,IACZC,OAAO,OACPC,MAAM,e,GAnBQC,cAgCXC,uBALS,SAAAC,GACtB,MAAO,CACLP,QAASO,EAAMC,SAASR,WAGY,CAAET,0BAA3Be,CAAmDb","file":"static/js/9.0cc543f4.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport default axios.create({\n  baseURL: \"https://helixlive.herokuapp.com\"\n});\n","export const API_NAME = {\n  SIGN_IN: \"/auth/login\",\n  MEETING: \"/meeting\"\n};\n","import * as ActionType from \"./actionTypes\";\nimport HttpService from \"../../API/HttpService\";\nimport { API_NAME } from \"../../API/ApiPaths\";\nimport history from \"../../history\";\nimport Loader from \"../../components/Shared/Loader/Loader\";\n\nexport const signIn = formValues => async dispatch => {\n  const response = await HttpService.post(API_NAME.SIGN_IN, formValues);\n\n  dispatch({\n    type: ActionType.SIGN_IN,\n    payload: response.data.user\n  });\n\n  if (response.status == 200) {\n    const data = response.data.user;\n    localStorage.setItem(\"id\", data._id);\n    localStorage.setItem(\"name\", data.name);\n    localStorage.setItem(\"email\", data.email);\n    localStorage.setItem(\"phone\", data.phone);\n    localStorage.setItem(\"user_plan\", data.user_plan);\n    localStorage.setItem(\"containerId\", data.containerId);\n\n    // history.push(\"/dashboard\");\n    window.location.href = \"/dashboard\";\n  }\n};\nexport const fetchActiveMeetings = query => async dispatch => {\n  const response = await HttpService.get(API_NAME.MEETING, {\n    params: query\n  });\n\n  dispatch({\n    type: ActionType.FETCH_ACTIVE_MEETINGS,\n    payload: response.data.data\n  });\n};\nexport const fetchInActiveMeetings = query => async dispatch => {\n  const response = await HttpService.get(API_NAME.MEETING, {\n    params: query\n  });\n\n  dispatch({\n    type: ActionType.FETCH_INACTIVE_MEETINGS,\n    payload: response.data.data\n  });\n};\nexport const createMeeting = body => async dispatch => {\n  const response = await HttpService.post(API_NAME.MEETING, body);\n\n  dispatch({\n    type: ActionType.CREATE_MEETING,\n    payload: response.data.data.room\n  });\n\n  const roomId = response.data.data.room.id;\n\n  if (response.status == 200) {\n    history.push(\"/dashboard\");\n    // history.push(`/meeting-room/${roomId}`);\n  }\n};\nexport const fetchMeetingByRoomId = query => async dispatch => {\n  const response = await HttpService.get(API_NAME.MEETING, {\n    params: query\n  });\n\n  dispatch({\n    type: ActionType.FETCH_MEETING_BY_ID,\n    payload: response.data.data.conference\n  });\n};\n\n// id: 3085824\n// room_type: \"meeting\"\n// room_pin: 219415442\n// name: \"Test\"\n// name_url: \"test\"\n// starts_at: \"2020-04-02T13:17:00+05:30\"\n// ends_at: \"2020-04-02T16:17:00+05:30\"\n// access_type: 1\n// lobby_enabled: true\n// lobby_description: \"\"\n// registration_enabled: 0\n// status: \"active\"\n// timezone: \"Asia/Kolkata\"\n// timezone_offset: 19800\n// paid_enabled: 0\n// automated_enabled: 0\n// created_at: \"2020-04-02T13:17:16+05:30\"\n// updated_at: \"2020-04-02T13:17:16+05:30\"\n// type: 0\n// permanent_room: false\n// ccc: \"2020-04-02 07:47:00\"\n// access_role_hashes: {listener: \"c7a47a6bb0c8b5d9381bc4005e859884\", presenter: \"24829b247bc910dd3f3b2a005e859884\", host: \"39e78d7e8bd20e7eb5d75f005e859884\"}\n// room_url: \"https://uniprojex.clickmeeting.com/test\"\n// phone_presenter_pin: 532917715\n// phone_listener_pin: 323361374\n// embed_room_url: \"https://embed.clickmeeting.com/embed_conference.html?r=1712711113085824\"\n// widgets_hash: \"rDh549\"\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { fetchMeetingByRoomId } from \"../../store/actions/index\";\nimport \"./MeetingRoom.css\";\nclass MeetingRoom extends Component {\n  componentDidMount() {\n    const body = {\n      id: this.props.match.params.id,\n      containerId: localStorage.getItem(\"containerId\")\n    };\n\n    this.props.fetchMeetingByRoomId(body);\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"inner-container\">\n          <iframe\n            className=\"iframe\"\n            src={this.props.meeting.room_url}\n            frameBorder=\"0\"\n            height=\"100%\"\n            width=\"100%\"\n          ></iframe>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    meeting: state.meetings.meeting\n  };\n};\nexport default connect(mapStateToProps, { fetchMeetingByRoomId })(MeetingRoom);\n\n// id: 3085824\n// room_type: \"meeting\"\n// room_pin: 219415442\n// name: \"Test\"\n// name_url: \"test\"\n// starts_at: \"2020-04-02T13:17:00+05:30\"\n// ends_at: \"2020-04-02T16:17:00+05:30\"\n// access_type: 1\n// lobby_enabled: true\n// lobby_description: \"\"\n// registration_enabled: 0\n// status: \"active\"\n// timezone: \"Asia/Kolkata\"\n// timezone_offset: 19800\n// paid_enabled: 0\n// automated_enabled: 0\n// created_at: \"2020-04-02T13:17:16+05:30\"\n// updated_at: \"2020-04-02T13:17:16+05:30\"\n// type: 0\n// permanent_room: false\n// ccc: \"2020-04-02 07:47:00\"\n// access_role_hashes: {listener: \"f4eae8588dfceb72c929b4005e859e4b\", presenter: \"86ca6783778a5a73f11101005e859e4b\", host: \"7aef4842f77f4c953435c0005e859e4b\"}\n// room_url: \"https://uniprojex.clickmeeting.com/test\"\n// phone_presenter_pin: 532917715\n// phone_listener_pin: 323361374\n// embed_room_url: \"https://embed.clickmeeting.com/embed_conference.html?r=1712711113085824\"\n// widgets_hash: \"rDh549\"\n// recorder_list: []\n// settings: {show_on_personal_page: true, thank_you_emails_enabled: true, connection_tester_enabled: false}\n// autologin_hashes: {host: \"ZmN4AGtlARO8YKkNozM1qzM1nUclDUE6oaM5YaOvrxO8YKkNnTâ€¦paZ0BQDlpmp3pmEjBGHmAQZ1pQNjZQIlBQH5pwEiDUjgsRN__\"}\n// autologin_hash: \"ZmN4AGtlARO8YKkNozM1qz\n"],"sourceRoot":""}